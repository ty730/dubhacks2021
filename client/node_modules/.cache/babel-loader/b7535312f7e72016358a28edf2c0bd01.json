{"ast":null,"code":"import _classCallCheck from\"/Users/tylerwong/Desktop/dubhacks2021/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tylerwong/Desktop/dubhacks2021/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/tylerwong/Desktop/dubhacks2021/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/tylerwong/Desktop/dubhacks2021/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import'../App.css';import React,{Component}from'react';import axios from'axios';import ScaleLoader from\"react-spinners/ScaleLoader\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Reddit=/*#__PURE__*/function(_Component){_inherits(Reddit,_Component);var _super=_createSuper(Reddit);function Reddit(props){var _this;_classCallCheck(this,Reddit);_this=_super.call(this,props);_this.state={response:null,fetched:false};return _this;}_createClass(Reddit,[{key:\"componentDidMount\",value:function componentDidMount(){this.wrapper();}},{key:\"wrapper\",value:function wrapper(){var _this2=this;axios.post('/api/reddit',{course:this.props.course//TODO REPLACE WITH PROP\n}).then(function(res){console.log(\"here\");console.log(res.data);_this2.setState({response:res.data,fetched:true});});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(this.props.course!=prevProps.course){this.wrapper();}}},{key:\"render\",value:function render(){var main;if(this.state.fetched){main=/*#__PURE__*/_jsx(\"div\",{className:\"reddit\",children:this.state.response.map(function(redditPost,i){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:redditPost.selftext},i),redditPost.comments.map(function(comment,j){return/*#__PURE__*/_jsx(\"p\",{children:comment.body},i);})]});})});}else{main=/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',height:'100px'},children:/*#__PURE__*/_jsx(ScaleLoader,{color:\"#607D8B\",loading:!this.state.fetched,size:150})});}return/*#__PURE__*/_jsx(\"div\",{children:main});}}]);return Reddit;}(Component);export default Reddit;","map":{"version":3,"sources":["/Users/tylerwong/Desktop/dubhacks2021/client/src/Components/Reddit.js"],"names":["React","Component","axios","ScaleLoader","Reddit","props","state","response","fetched","wrapper","post","course","then","res","console","log","data","setState","prevProps","main","map","redditPost","i","selftext","comments","comment","j","body","display","justifyContent","alignItems","height"],"mappings":"4nBAAA,MAAO,YAAP,CACA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,4BAAxB,C,2FAEMC,CAAAA,M,gGACJ,gBAAYC,KAAZ,CAAmB,wCACjB,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACXC,QAAQ,CAAE,IADC,CAEXC,OAAO,CAAE,KAFE,CAAb,CAFiB,aAMlB,C,oDAED,4BAAoB,CAClB,KAAKC,OAAL,GACD,C,uBAED,kBAAU,iBACRP,KAAK,CAACQ,IAAN,CAAW,aAAX,CAA0B,CACxBC,MAAM,CAAE,KAAKN,KAAL,CAAWM,MAAO;AADF,CAA1B,EAEGC,IAFH,CAEQ,SAACC,GAAD,CAAS,CACbC,OAAO,CAACC,GAAR,CAAY,MAAZ,EACFD,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,EACA,MAAI,CAACC,QAAL,CAAc,CAACV,QAAQ,CAAEM,GAAG,CAACG,IAAf,CAAqBR,OAAO,CAAE,IAA9B,CAAd,EACD,CAND,EAOD,C,kCAED,4BAAmBU,SAAnB,CAA8B,CAC5B,GAAG,KAAKb,KAAL,CAAWM,MAAX,EAAqBO,SAAS,CAACP,MAAlC,CACA,CACE,KAAKF,OAAL,GACD,CACF,C,sBAED,iBAAS,CACP,GAAIU,CAAAA,IAAJ,CACA,GAAI,KAAKb,KAAL,CAAWE,OAAf,CAAwB,CACtBW,IAAI,cAAG,YAAK,SAAS,CAAC,QAAf,UAAyB,KAAKb,KAAL,CAAWC,QAAX,CAAoBa,GAApB,CAAwB,SAACC,UAAD,CAAaC,CAAb,CAAmB,CACvE,mBAAQ,oCACN,oBAAaD,UAAU,CAACE,QAAxB,EAASD,CAAT,CADM,CAELD,UAAU,CAACG,QAAX,CAAoBJ,GAApB,CAAwB,SAACK,OAAD,CAAUC,CAAV,CAAgB,CACrC,mBACI,mBAAYD,OAAO,CAACE,IAApB,EAAQL,CAAR,CADJ,CAGH,CAJA,CAFK,GAAR,CASH,CAV+B,CAAzB,EAAP,CAWD,CAZD,IAYO,CACLH,IAAI,cAAG,YAAK,KAAK,CAAE,CAACS,OAAO,CAAE,MAAV,CAAkBC,cAAc,CAAE,QAAlC,CAA4CC,UAAU,CAAE,QAAxD,CAAkEC,MAAM,CAAE,OAA1E,CAAZ,uBACP,KAAC,WAAD,EAAa,KAAK,CAAE,SAApB,CAA+B,OAAO,CAAE,CAAC,KAAKzB,KAAL,CAAWE,OAApD,CAA6D,IAAI,CAAE,GAAnE,EADO,EAAP,CAGD,CACD,mBACE,qBACGW,IADH,EADF,CAKD,C,oBAtDkBlB,S,EAyDrB,cAAeG,CAAAA,MAAf","sourcesContent":["import '../App.css';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\n\nclass Reddit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: null,\n      fetched: false,\n    };\n  }\n\n  componentDidMount() {\n    this.wrapper();\n  }\n\n  wrapper() {\n    axios.post('/api/reddit', {\n      course: this.props.course //TODO REPLACE WITH PROP\n    }).then((res) => {\n        console.log(\"here\");\n      console.log(res.data);\n      this.setState({response: res.data, fetched: true});\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if(this.props.course != prevProps.course)\n    {\n      this.wrapper();\n    }\n  } \n\n  render() {\n    let main;\n    if (this.state.fetched) {\n      main = <div className=\"reddit\">{this.state.response.map((redditPost, i) => {\n          return (<div>\n            <h2 key={i}>{redditPost.selftext}</h2>\n            {redditPost.comments.map((comment, j) => {\n                return (\n                    <p key={i}>{comment.body}</p>\n                )\n            })}\n            </div>\n            )\n      })}</div>\n    } else {\n      main = <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100px'}}>\n      <ScaleLoader color={\"#607D8B\"} loading={!this.state.fetched} size={150} />\n    </div>\n    }\n    return (\n      <div>\n        {main}\n      </div>\n    );\n  }\n}\n\nexport default Reddit;"]},"metadata":{},"sourceType":"module"}